<!DOCTYPE html>
<html>

<head>
	<link rel="stylesheet" href="../style/wager.css">
	<script src="https://kit.fontawesome.com/4e5174e0e9.js" crossorigin="anonymous"></script>
	<meta name="viewport" content="width=device-width, initial-scale=1">

	<title>Wager | Tokens</title>
	<link rel="shortcut icon" type="image/jpg" href="/logo/256.png"/>
</head>

<body>
</script>
<!--Start of Tawk.to Script-->
<script type="text/javascript">
	var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
	(function(){
	var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
	s1.async=true;
	s1.src='https://embed.tawk.to/61f04232b9e4e21181bbded8/1fq9855q8';
	s1.charset='UTF-8';
	s1.setAttribute('crossorigin','*');
	s0.parentNode.insertBefore(s1,s0);
	})();
	</script>
	<!--End of Tawk.to Script-->
	<div id="main">
		<div id="left">
			<div id="info">
				<span class="label">Match Type</span>
				<p><%=team_size%> <%=match_type%></p>
				<span class="label">Entry Fee</span>
				<p><%=entry_fee%></p>
				<span class="label">Region</span>
				<p><%=region%></p>
				<span class="label">First to</span>
				<p><%=first_to%> (Win by 2)</p>
				<span class="label">Platform</span>
				<p><%=platform%></p>
				<p style="font-weight: 400">Rules found <a style="color: blue" href="/rules" target="_blank">here</a>.</p>
			</div>

			<div id="chat-container">
				<h3>Messages</h3>
				<div id="chat">
				</div>
				<input id="message-input" placeholder="Type to chat, enter to send">
			</div>

			<a id="discord" href="https://discord.gg/TavernGaming" target="_blank">Join Our Discord <i class="fab fa-discord"></i></a>
		</div><!--

	--><div id="right">
			<a href="/dashboard" id="to-dashboard"><i class="fa fa-long-arrow-alt-left"></i> Dashboard</a>
			<div id="activity">
				<%if (tools) { %>
					<%- include("html/senmod.html"); %>
				<% } %>
				<div id="error-box" style="display: none">
					<p id="error"><b>Error:</b> Placeholder error, server returned null</p>
					<i class="fa fa-times" id="error-close"></i>
				</div>
				<p id="timer" style="display: none"></p>
				<p id="cancelled" style="display: none">Match has been <b>cancelled</b>.</p>
				<p id="loading" class="loading">Loading status...</p>
				<p id="waiting-join" class="loading" style="display: none">Waiting for a team to join...</p>
				<div style="text-align: center">
					<a id="waiting-cancel" href="#" style="display:none">Cancel Match</a>
				</div>
				<div id="ready-box" style="display: none">
					<h3>Another team has joined, ready up.</h3>
					<div style="margin: 25px 0">
						<a href="#" id="ready-button">Ready</a>
					</div>
					<div id="readied-users">
					</div>
				</div>
				<div id="playing-box" style="display: none">
					<p id="one-submission" style="display: none"></p>
					<div id="playing-buttons">
						<a href="#" id="win-button">My Team Won</a>
						<a href="#" id="lost-button">My Team Lost</a>
					</div>
				</div>
				<div id="done-box" style="display: none">
					<b><p id="done-status"></p></b>
				</div>
				<div id="dispute-box" style="display: none">
					<h3>DISPUTED</h3>
					<p>A moderator will be with you shortly, please prepare any evidence you may need. If a moderator does not arrive within 5 minutes, feel free to create a ticket in our discord.</p>
				</div>

				<div id="all-users">

				</div>
			</div>
		</div>
	</div>
	<script>
	var currentState = -1;
	var chatMessageCount = 0;
	var user_ready_template = "<p class='user-ready'><b>{0}</b>: <span class='r{2}'>{1}</span></p>";
	if(!String.format) {
		String.format = function(format) {
			var args = Array.prototype.slice.call(arguments, 1);
			return format.replace(/{(\d+)}/g, function(match, number) {
				return typeof args[number] != 'undefined' ? args[number] : match;
			});
		};
	}

	function getWagerId() {
		return window.location.href.toString().split("/wager/")[1].replace('#', '');
	}

	function hideStateElements() {
		var elements = [document.getElementById("loading"), document.getElementById("all-users"), document.getElementById("ready-box"), document.getElementById("cancelled"), document.getElementById("timer"), document.getElementById("waiting-join"), document.getElementById("done-box"), document.getElementById("playing-box"), document.getElementById("dispute-box"), document.getElementById("one-submission"), document.getElementById("waiting-cancel")];
		for(var i = 0; i < elements.length; i++) {
			elements[i].style.display = "none";
		}
	}

	function tick(num) {
		if(num < 0) {
			return;
		}
		document.getElementById("timer").innerHTML = num.toString();
	}

	function parseStatus(wager_state) {
		var state = wager_state.state;
		// begin by clearing all the state elements
		hideStateElements();
		var username = wager_state.your_username;
		if(state == wager_state.JOIN_STATE) {
			document.getElementById("waiting-join").style.display = "block";
			document.getElementById("waiting-cancel").style.display = "inline-block";
		} else if(state == wager_state.READY_STATE) {
			// show ready box and timer
			document.getElementById("ready-box").style.display = "block";
			document.getElementById("timer").style.display = "inline-block";
			tick(wager_state.timer);
			// set timer for the next two ticks (after the third, parseStatus will be called again)
			setTimeout(tick.bind(null, wager_state.timer - 1), 1000);
			setTimeout(tick.bind(null, wager_state.timer - 2), 2000);
			// get list of users who are ready, check if we are ready already
			var readied_users = wager_state.readied_users;
			if(wager_state.is_readied[readied_users.indexOf(username)]) {
				document.getElementById("ready-button").classList.add("disabled");
				document.getElementById("timer").style.display = "inline-block";
			}
			// clear list of ready users
			var ready_users_box = document.getElementById("readied-users");
			ready_users_box.innerHTML = "";
			// loop through users and add them to html
			for(var i = 0; i < readied_users.length; i++) {
				var user = "User " + (i+1).toString();
				var is_ready = wager_state.is_readied[i].toString();
				var ready_string = "Ready";
				if (!wager_state.is_readied[i]) {
					ready_string = "Not Ready";
				}
				ready_users_box.innerHTML += String.format(user_ready_template, user, ready_string, is_ready);
			}
		} else if(state == wager_state.PLAYING_STATE) {
			// show playing box
			document.getElementById("playing-box").style.display = "block";
			// show timer if someone has submitted their results
			if(wager_state.timer > 0) {
				tick(wager_state.timer);
				// set timer for the next two ticks (after the third, parseStatus will be called again)
				setTimeout(tick.bind(null, wager_state.timer - 1), 1000);
				setTimeout(tick.bind(null, wager_state.timer - 2), 2000);
				document.getElementById("timer").style.display = "inline-block";
				// show status of submissions
				document.getElementById("one-submission").style.display = "block";
				if(wager_state.your_team == wager_state.single_sub) {
					document.getElementById("one-submission").innerHTML = "Your team has submitted a win, waiting for other team to confirm.";
				} else {
					document.getElementById("one-submission").innerHTML = "Other team has submitted a win, please either confirm or dispute.";
				}
			}
		} else if(state == wager_state.CANCEL_STATE) {
			// show cancelled and timer
			tick(0);
			document.getElementById("cancelled").style.display = "block";
			document.getElementById("timer").style.display = "inline-block";
		} else if(state == wager_state.DONE_STATE) {
			// show done box
			document.getElementById("done-box").style.display = "block";
			var winners;
			if(wager_state.winner == 1) {
				winners = wager_state.blue_users;
			} else if(wager_state.winner == 2) {
				winners = wager_state.red_users;
			}
			var winner_string = "";
			if(winners.length >= 3) {
				for(var i = 0; i < winners.length; i++) {
					if(i != winners.length - 1) {
						winner_string += winners[i] + ", ";
					} else {
						winner_string += "and " + winners[i];
					}
				}
				winner_string += " have won!";
			} else if(winners.length == 2) {
				winner_string = winners[0] + " and " + winners[1] + " have won!";
			} else if(winners.length == 1) {
				winner_string = winners[0] + " has won!";
			}
			document.getElementById("done-status").innerHTML = winner_string;
		} else if(state == wager_state.DISPUTE_STATE) {
			document.getElementById("dispute-box").style.display = "block";
		}

		if (state != wager_state.JOIN_STATE && state != wager_state.READY_STATE && state != wager_state.CANCEL_STATE) {
			var usersBox = document.getElementById("all-users");
			usersBox.style.display = "block";
			usersBox.innerHTML = "";

			usersBox.innerHTML += "<h2>Blue Team</h2>";
			for (var i = 0; i < wager_state.blue_users.length; i++) {
				var name = wager_state.blue_users[i];
				usersBox.innerHTML += "<p class='user-name'><b>" + name + "</b></p>";
				usersBox.innerHTML += "<p class='epic'>Epic: <i>" + wager_state.epics[i] + "</i></p>";
			}

			usersBox.innerHTML += "<h2>Red Team</h2>";
			for (var i = 0; i < wager_state.red_users.length; i++) {
				var name = wager_state.red_users[i];
				usersBox.innerHTML += "<p class='user-name'><b>" + name + "</b></p>";
				usersBox.innerHTML += "<p class='epic'>Epic: <i>" + wager_state.epics[i + wager_state.blue_users.length] + "</i></p>";
			}

		}
		updateChat();
		currentState = state;
	}

	function sendChatMessage(e) {

		if (e.key !== 'Enter') {
			return;
		}

		var text = document.getElementById("message-input");
		if (text.value.length == 0) {
			return;
		}

		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/chat', true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if(xhr.status == 200) {
				updateChat();
			} else if(xhr.status == 409) {
				console.error("Could not send chat message.");
			}
		};
		xhr.send(JSON.stringify({
			'msg': text.value,
			'wId': getWagerId()
		}));

		text.value = "";

	}

	var chatCount = 0;

	function addChatMessages(msgs) {
		var chatDiv = document.getElementById("chat");
		var newChatCount = 0;

		var chats = msgs;
		var totalHTML = "";
		for(var i = 0; i < chats.length; i++) {
			var u = chats[i].username;
			var t = chats[i].text;
			totalHTML += "<div class='message'><p><b>" + u + ":</b> " + t + "</p></div>";
			newChatCount++;
		}
		chatMessageCount += i;
		chatDiv.innerHTML += totalHTML;

		if (chatCount != newChatCount) {
			chatDiv.scrollTop = chatDiv.scrollHeight;
		}

	}

	function updateChat() {
		var wagerid = getWagerId();
		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/getChat', true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if(xhr.status == 200) {
				new_messages = JSON.parse(xhr.responseText);
				addChatMessages(new_messages);
			} else if(xhr.status == 409) {
				console.error("Couldn't update chat.");
			}
		};
		xhr.send(JSON.stringify({
			'mCount': chatMessageCount,
			'wId': wagerid
		}));
	}

	function getData() {
		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/wagerStatus/' + getWagerId(), true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if(xhr.status == 200) {
				wager_state = JSON.parse(xhr.responseText);
				parseStatus(wager_state);
			} else if(xhr.status == 409) {
				console.error("Server could not provide a status update.");
			}
		};
		xhr.send();
	}

	function readyUp() {
		if(document.getElementById("ready-button").classList.contains("disabled")) {
			return;
		}
		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/ready', true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if(xhr.status == 200) {
				document.getElementById("ready-button").classList.add("disabled");
				getData();
			} else if(xhr.status == 409) {
				error("Failed to ready up.");
			}
		};
		xhr.send(JSON.stringify({
			wagerid: getWagerId()
		}));
	}

	function error(text) {
		document.getElementById("error-box").style.display = "block";
		document.getElementById("error").innerHTML = "<b>Error: </b>" + text;
	}

	function closeError(e) {
		document.getElementById("error-box").style.display = "none";
		document.getElementById("error").innerHTML = "";
	}
	document.getElementById("error-close").onclick = closeError;

	function submitWagerResult(r) {
		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/submitWagerResult', true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if(xhr.status == 200) {
				getData();
			} else if(xhr.status == 409) {
				error(xhr.responseText);
			}
		};
		xhr.send(JSON.stringify({
			status: r,
			wagerid: getWagerId()
		}));
	}

	function weWon() {
		submitWagerResult(1);
	}

	function weLost() {
		submitWagerResult(0);
	}

	function cancelWager() {
		var xhr = new XMLHttpRequest();
		xhr.open("POST", '/cancel', true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if(xhr.status == 200) {
				getData();
			} else if(xhr.status == 409) {
				error(xhr.responseText);
			}
		};
		xhr.send(JSON.stringify({
			wagerid: getWagerId()
		}));
	}
	document.getElementById("ready-button").onclick = readyUp;
	document.getElementById("win-button").onclick = weWon;
	document.getElementById("lost-button").onclick = weLost;
	//document.getElementById("message-send").onclick = sendChatMessage;
	document.getElementById("message-input").onkeydown = sendChatMessage;
	document.getElementById("waiting-cancel").onclick = cancelWager;
	window.onload = getData();
	setInterval(getData, 3000);
	</script>
</body>

</html>